request = require "request"

API_URL = "http://en.wikipedia.org/w/api.php"

DEFAULT_LIMIT = 10
DEFAULT_SUGGESTION = no
DEFAULT_AUTO_SUGGEST = yes
DEFAULT_REDIRECT = yes
DEFAULT_PRELOAD = no
DEFAULT_ORIGINAL_TITLE = ""
DEFAULT_PAGES = 1

_req = task(params)
	params.format = "json"
	params.action = "query"
	options = 
		uri: API_URL
		qs: params
	wait for e,res,body from request.get options
	return JSON.parse res

Array.prototype.extend = (array) ->
	me.push.apply me, array

String.prototype.startsWith = (str) ->
	return me.indexOf(str) is 0

addProtocol = (url) ->
	return url if url.startsWith("http") otherwise "http:" + url

Wiki = {}

###
Searches Wikipedia
@param {string} query - The search query.
@param {number} limit - The number of results. (Optional: Default is 10)
@param {boolean} suggestion - Allow  Wikipedia to return a suggested article (Optional: Default is true)
@param {function} callback - Callback with parameters (error, results, suggestion)
###
Wiki.search = task(query, limit = DEFAULT_LIMIT, suggestion = DEFAULT_SUGGESTION)
	
	params =
		list: "search"
		srprop: ""
		srlimit: limit
		srsearch: query

	params.srinfo = "suggestion" when suggestion is yes

	wait for raw from _req params

	results = [item.title for item in raw.query.search]

	when suggestion is yes and raw.query.searchinfo exists
		return results, raw.query.searchinfo.suggestion
	
	return results

###
Obtain random articles from Wikipedia
@param {number} pages - The number of random articles. (Optional: Default is 1)
@param {function} callback - Callback with parameters (error, results)
###
Wiki.random = task(pages = DEFAULT_PAGES)
	
	params =
		list: "random"
		rnnamespace: 0
		rnlimit: pages
	wait for raw from _req params
	return [page.title for page in raw.query.random]

###
Obtain a WikiPage object by article title
@param {string} title - Article title
@param {boolean} autoSuggest - Allow Wikipedia to return a suggested article (Optional: Default is true)
@param {boolean} redirect - Allow Wikipedia to redirect an article (Optional: Default is true)
@param {function} callback - Callback with parameters (error, page)
###
Wiki.page = task(title, autoSuggest = DEFAULT_AUTO_SUGGEST, redirect = DEFAULT_REDIRECT)	
	
	if autoSuggest is yes
		wait for results, suggestion from Wiki.search title, 1, yes
		try
			title = suggestion or results[0]
			page = new WikiPage title, redirect
			wait for code from page.load(
				redirect: redirect
			)
			return page
		catch e
			throw
				name: "PageError"
				message: title
				original: e
	else	
		page = new WikiPage title, redirect
		wait for code from page.load(
			redirect: redirect
		)
		return page

class WikiPage
	
	method initialize(title, redirect = DEFAULT_REDIRECT, preload = DEFAULT_PRELOAD, originalTitle)
		me.title = title
		me.originalTitle = originalTitle or title
	
	task load(redirect, preload)
		params =
			prop: "info|pageprops"
			inprop: "url"
			ppprop: "disambiguation"
			titles: me.title

		that = this

		wait for raw from _req params

		pageId = Object.keys(raw.query.pages)[0]
		data = raw.query.pages[pageId]

		if data.missing is ""
			throw
				name: "PageError"
				message: me.title
		else if data.redirect is ""
			#might not have to handle this...
			throw "!!! Handle Redirect"
		else if data.pageprops exists
			#need html parser for this...
			throw "!!! Handle PageProps"
		else
			that.pageId = pageId
			that.url = data.fullurl

		return yes

	task _helper(name, params)
		when me[name] exists
			return me[name]
		otherwise
			that = me
			wait for raw from _req params
			that[name] = raw.query.pages[that.pageId].extract
			return that[name]

	###
	Get the HTML from an article
	@param {function} callback - Callback with parameters (error, html)
	###
	task html()
		when me._html exists
			return me._html
		otherwise
			that = me
			params = 
				prop: "revisions"
				rvprop: "content"
				rvlimit: 1
				rvparse: ""
				titles: me.title
			wait for raw from _req params
			that._html = raw.query.pages[that.pageId].revisions[0]["*"]
			return that._html

	###
	Get the text content from an article
	@param {function} callback - Callback with parameters (error, content)
	###
	task content()
		params = 
			prop: "extracts"
			explaintext: ""
			titles: me.title
		wait for data from me._helper "_content", params
		return data

	###
	Get the text summary from an article
	@param {function} callback - Callback with parameters (error, summary)
	###
	task summary()
		params =
			prop: "extracts"
			explaintext: ""
			exintro: ""
			titles: me.title
		wait for data from me._helper "_summary", params
		return data

	###
	Get list of image URLs from an article
	@param {function} callback - Callback with parameters (error, images)
	###
	task images()
		when me._images exists
			return me._images
		otherwise
			that = me
			wait for raw from _req(
				generator: "images"
				gimlimit: "max"
				prop: "imageinfo"
				iiprop: "url"
				titles: me.title
			)
			that._images = [image.imageinfo[0].url for property value image in raw.query.pages]
			return that._images

	###
	Get list of reference URLs from an article
	@param {function} callback - Callback with parameters (error, refs)
	###
	task references()
		when me._references exists
			return me._references
		otherwise
			that = me
			wait for raw from _req(
				prop: "extlinks"
				ellimit: "max"
				titles: me.title
			)
			links = raw.query.pages[that.pageId].extlinks
			that._references = [addProtocol(link["*"]) for link in links]
			return that._references

	task addLinks(start)
		my = me
		params =
			prop: "links"
			plnamespace: 0
			pllimit: "max"
			titles: me.title
		params.plcontinue = start when start isnt false
		wait for raw from _req params
		my._links.extend [link.title for link in raw.query.pages[my.pageId].links]
		if raw["query-continue"] exists
			wait for done from my.addLinks raw["query-continue"].links.plcontinue
			return done
		otherwise
			return true

	###
	Get list of links from an article
	@param {function} callback - Callback with parameters (error, links)
	###
	task links()
		when me._links exists
			return me._links
		otherwise
			me._links = []
			my = me
			wait for done from me.addLinks false		
			return my._links

module.exports = Wiki		
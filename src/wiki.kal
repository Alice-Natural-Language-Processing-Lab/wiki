###
Requires
###
request = require "request"

###
Defaults
###
DEFAULT_API_URL = "http://en.wikipedia.org/w/api.php"
DEFAULT_LIMIT = 10
DEFAULT_SUGGESTION = no
DEFAULT_AUTO_SUGGEST = yes
DEFAULT_REDIRECT = yes
DEFAULT_PRELOAD = no
DEFAULT_ORIGINAL_TITLE = ""
DEFAULT_PAGES = 1

###
Base Wikipedia Interface
###
Wiki =

	apiUrl: DEFAULT_API_URL

###
Basic request method
@param {object} params - Parameters for the HTTP request
###
Wiki.request = task(params)
	
	params.format = "json"
	params.action = "query"
	options =
		uri: Wiki.apiUrl
		qs: params
	wait for e, res, body from request.get options
	return JSON.parse res

###
Searches Wikipedia
@param {string} query - The search query.
@param {number} limit - The number of results. (Optional: Default is 10)
@param {boolean} suggestion - Allow  Wikipedia to return a suggested article (Optional: Default is true)
@param {function} callback - Callback with parameters (error, results, suggestion)
###
Wiki.search = task(query, limit = DEFAULT_LIMIT, suggestion = DEFAULT_SUGGESTION)
	
	params =
		list: "search"
		srprop: ""
		srlimit: limit
		srsearch: query

	params.srinfo = "suggestion" when suggestion is yes

	wait for res from Wiki.request params

	results = [item.title for item in res.query.search]

	when suggestion is yes and res.query.searchinfo exists
		return results, res.query.searchinfo.suggestion
	
	return results

###
Obtain random articles from Wikipedia
@param {number} pages - The number of random articles. (Optional: Default is 1)
@param {function} callback - Callback with parameters (error, results)
###
Wiki.random = task(pages = DEFAULT_PAGES)
	
	params =
		list: "random"
		rnnamespace: 0
		rnlimit: pages
	wait for res from Wiki.request params
	return [page.title for page in res.query.random]

###
Obtain a WikiPage object by article title
@param {string} title - Article title
@param {boolean} autoSuggest - Allow Wikipedia to return a suggested article (Optional: Default is true)
@param {function} callback - Callback with parameters (error, page)
###
Wiki.page = task(title, autoSuggest = DEFAULT_AUTO_SUGGEST)	
	
	if autoSuggest is yes
		wait for results, suggestion from Wiki.search title, 1, yes
		try
			title = suggestion or results[0]
			page = new WikiPage title
			wait for code from page.load()
			return page
		catch e
			throw
				name: "PageError"
				message: title
				original: e
	else	
		page = new WikiPage title
		wait for code from page.load()
		return page

class WikiPage
	
	method initialize(title, originalTitle)
		
		me.title = title
		me.originalTitle = originalTitle or title
	
	task load()
		
		wait for res from Wiki.request(
			prop: "info|pageprops"
			inprop: "url"
			ppprop: "disambiguation"
			titles: me.title
		)

		me.pageId = Object.keys(res.query.pages)[0]
		me.url = res.query.pages[me.pageId].fullurl

		return yes

	###
	Helper Functions
	###

	task _helper(name, params)
		
		when me[name] exists
			return me[name]
		otherwise
			wait for res from Wiki.request params
			me[name] = res.query.pages[me.pageId].extract
			return me[name]

	task queryContinue(params, continueKey, handler, start = no)
		params[continueKey] = start when start isnt no
		wait for res from Wiki.request params
		handler res.query.pages[me.pageId][params.prop]
		delete params[continueKey]
		if res["query-continue"] exists
			startFrom = res["query-continue"][params.prop][continueKey]
			wait for done from me.queryContinue params, continueKey, handler, startFrom
			return done
	
	###
	Get the HTML from an article
	@param {function} callback - Callback with parameters (error, html)
	###
	task html()
		when me._html exists
			return me._html
		otherwise
			params = 
				prop: "revisions"
				rvprop: "content"
				rvlimit: 1
				rvparse: ""
				titles: me.title
			wait for res from Wiki.request params
			me._html = res.query.pages[me.pageId].revisions[0]["*"]
			return me._html

	###
	Get the text content from an article
	@param {function} callback - Callback with parameters (error, content)
	###
	task content()
		params = 
			prop: "extracts"
			explaintext: ""
			titles: me.title
		wait for data from me._helper "_content", params
		return data

	###
	Get the text summary from an article
	@param {function} callback - Callback with parameters (error, summary)
	###
	task summary()
		params =
			prop: "extracts"
			explaintext: ""
			exintro: ""
			titles: me.title
		wait for data from me._helper "_summary", params
		return data

	###
	Get list of image URLs from an article
	@param {function} callback - Callback with parameters (error, images)
	###
	task images()
		when me._images exists
			return me._images
		otherwise
			wait for res from Wiki.request(
				generator: "images"
				gimlimit: "max"
				prop: "imageinfo"
				iiprop: "url"
				titles: me.title
			)
			me._images = [image.imageinfo[0].url for property value image in res.query.pages]
			return me._images

	###
	Get list of reference URLs from an article
	@param {function} callback - Callback with parameters (error, refs)
	###
	task references()
		when me._references exists
			return me._references
		otherwise
			wait for res from Wiki.request(
				prop: "extlinks"
				ellimit: "max"
				titles: me.title
			)
			links = res.query.pages[me.pageId].extlinks
			me._references = [addProtocol(link["*"]) for link in links]
			return me._references

	###
	Get list of links from an article
	@param {function} callback - Callback with parameters (error, links)
	###
	task links()
		when me._links exists
			return me._links
		otherwise
			me._links = []
			params =
				prop: "links"
				plnamespace: 0
				pllimit: "max"
				titles: me.title
			wait for done from me.queryContinue(params, "plcontinue", (data) ->
				me._links.extend [ link.title for link in data ]
			)
			return me._links

	###
	Check if page is within a given category...
	@param {string} category - Category to check
	@param {function} callback - Callback with parameters (error, result)
	###
	task withinCategory(category)
		when me._categories exists
			return me._categories.contains category
		otherwise
			wait for res from Wiki.request(
				prop: "categories"
				cllimit: 1
				clcategories: category
				titles: me.title
			)
			return res.query.pages[me.pageId].categories.length is 1

	###
	Get titles of categories the page belongs to
	@param {function} callback - Callback with parameters (error, categories)
	###
	task categories()
		when me._categories exists
			return me._categories
		otherwise
			me._categories = []
			params =
				prop: "categories"
				cllimit: "max"
				titles: me.title
			wait for done from me.queryContinue(params, "clcontinue", (data) ->
				me._categories.extend [ category.title for category in data ]
			)
			return me._categories

Array.prototype.extend = (array) ->
	me.push.apply me, array

Array.prototype.contains = (i) ->
	return me.indexOf(i) isnt -1

String.prototype.startsWith = (str) ->
	return me.indexOf(str) is 0

addProtocol = (url) ->
	return url if url.startsWith("http") otherwise "http:" + url

module.exports = Wiki
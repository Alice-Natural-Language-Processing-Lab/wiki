Wiki = require "../build/wiki.min.js"
assert = require "assert"

Array.prototype.contains = (needle) ->
	return this.indexOf(needle) isnt -1

String.prototype.startsWith = (str) ->
	return me.indexOf(str) is 0

String.prototype.contains = (str) ->
	return me.indexOf(str) isnt -1

now = () ->
	return new Date().getTime()

describe("Wiki Methods", () ->
	
	it("Search should auto suggest an article", (done) ->
		wait for results from Wiki.search "kevin bacon number"
		assert results.contains "Six degrees of separation"
		done()
	)

	it("Random should return the correct number of results", (done) ->
		wait for results from Wiki.random 3
		assert.equal results.length, 3
		wait for results from Wiki.random()
		assert.equal results.length, 1
		done()
	)

	it("Get a page object from the page method", (done) ->
		wait for page from Wiki.page "batman"
		assert page exists
		done()
	)

	it("Get a page list from coordinates", (done) ->
		wait for results from Wiki.geoSearch 32.329, -96.136
		assert results.contains "Gun Barrel City, Texas"
		done()
	)

)

describe("Page Methods", () ->
	
	it("should return the content from an article", (done) ->
		wait for page from Wiki.page "world wide web"
		wait for content from page.content()
		assert content.contains "Tim Berners-Lee"
		done()
	)

	it("should return an image list", (done) ->
		wait for page from Wiki.page "joker comics"
		wait for images from page.images()
		assert images.contains "http://upload.wikimedia.org/wikipedia/en/f/f9/Manwholaughs.jpg"
		done()
	)

	it("should return references", (done) ->
		wait for page from Wiki.page "luke skywalker"
		wait for ref from page.references()
		assert ref.contains "http://www.starwars.com/databank/character/lukeskywalker/"
		done()	
	)

	it("should return links", (done) ->
		wait for page from Wiki.page "batman"
		wait for links from page.links()
		assert links.contains "Playboy"
		done()	
	)

	it("should return the correct categories", (done) ->
		wait for page from Wiki.page "albert einstein"
		wait for list from page.categories()
		assert list.contains "Category:American Zionists"
		done()	
	)

	it("should check if it is within a category", (done) ->
		wait for page from Wiki.page "albert einstein"
		wait for result from page.withinCategory "Category:German physicists"
		assert result is true
		done()
	)

	it("should cache data", (done) ->
		wait for page from Wiki.page "han solo"
		start = now()
		wait for list from page.categories()
		firstTime = now() - start
		start = now()
		wait for cachedList from page.categories()
		secondTime = now() - start
		assert secondTime < firstTime
		done()
	)

	it("should limit category search", (done) ->
		wait for page from Wiki.page "lightsaber"
		wait for list from page.categories 4
		assert list.length is 4
		done()
	)

	it("should support geographical location", (done) ->
		wait for page from Wiki.page "Texas"
		wait for coord from page.coordinates()
		assert coord.lat is 31 and coord.lon is -100
		done()
	)

	it("should support infobox data", (done) ->
		wait for page from Wiki.page "Bob Kane"
		wait for text from page.infobox()
		assert text.contains "Batman"
		done()
	)

	it("should support parsed info data", (done) ->
		wait for page from Wiki.page "Dread Pirate Roberts"
		wait for info from page.info()
		assert info.series is "The Princess Bride"
		assert info.portrayer is "Cary Elwes" 
		done()
	)

	it("should support backlinks", (done) ->
		wait for page from Wiki.page "Robert Plant"
		wait for links from page.backlinks()
		assert links.contains "Led Zeppelin"
		done()
	)

	it "should handle pages which do not exist", (done) ->
		try
			wait for page from Wiki.page "the slow motion version CSUCI"
		catch error
			assert error.name is "NoArticle"
			assert error.suggestion is "the slow motion version CSI"
		done()
	
	it "should support asynchronous looping", (done) ->
		people = ['Narendra Modi','Salman Khan','Narendra Prasad', 'Narendra Karmarkar','Narendra Hirwani','Bill Gates', 'Elon Musk', 'Michael Jackson', 'Bob Dylan']
		pages = []
		ids = "444222,302167,6317106,1162259,30864449,3747,909036,14995351,4637590".split(",")
		for parallel person in people
			wait for page from Wiki.page person
			pages.push page
		assert.equal pages.length, people.length
		_ids = [page.pageId for page in pages]
		ids.sort()
		_ids.sort()
		assert.equal ids.toString(), _ids.toString() 
		done()

)